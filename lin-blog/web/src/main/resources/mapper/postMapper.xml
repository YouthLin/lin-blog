<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.youthlin.blog.dao.PostDao">
    <resultMap id="postMap" type="com.youthlin.blog.model.po.Post">
        <id property="postId" column="ID"/>
        <result property="postAuthorId" column="post_author"/>
        <result property="postDate" column="post_date"/>
        <result property="postDateUtc" column="post_date_utc"/>
        <result property="postContent" column="post_content"/>
        <result property="postTitle" column="post_title"/>
        <result property="postExcerpt" column="post_excerpt"/>
        <result property="postStatus" column="post_status"/>
        <result property="commentOpen" column="comment_open"/>
        <result property="pingOpen" column="ping_open"/>
        <result property="postPassword" column="post_password"/>
        <result property="postName" column="post_name"/>
        <result property="postModified" column="post_modified"/>
        <result property="postModifiedUtc" column="post_modified_utc"/>
        <result property="postParent" column="post_parent"/>
        <result property="postType" column="post_type"/>
        <result property="postMimeType" column="post_mime_type"/>
        <result property="commentCount" column="comment_count"/>
    </resultMap>

    <sql id="all">
        posts.ID, post_author, post_date, post_date_utc,
        post_content, post_title, post_excerpt, post_status,
        comment_open, ping_open, post_password, post_name,
        post_modified, post_modified_utc, post_parent, post_type, post_mime_type, comment_count
    </sql>

    <insert id="save" useGeneratedKeys="true" parameterType="com.youthlin.blog.model.po.Post" keyProperty="postId">
        INSERT INTO posts (post_author, post_date, post_date_utc,
                           post_content, post_title, post_excerpt, post_status,
                           comment_open, ping_open, post_password, post_name,
                           post_modified, post_modified_utc, post_parent, post_type, post_mime_type, comment_count)
        VALUES
            (#{postAuthorId}, #{postDate}, #{postDateUtc}, #{postContent}, #{postTitle}, #{postExcerpt}, #{postStatus},
                              #{commentOpen}, #{pingOpen}, #{postPassword}, #{postName}, #{postModified},
             #{postModifiedUtc}, #{postParent}, #{postType}, #{postMimeType}, #{commentCount})
    </insert>

    <update id="update" parameterType="com.youthlin.blog.model.po.Post">
        UPDATE posts
        SET post_author       = #{postAuthorId}, post_date = #{postDate}, post_date_utc = #{postDateUtc},
            post_content      = #{postContent}, post_title = #{postTitle}, post_excerpt = #{postExcerpt},
            post_status       = #{postStatus}, comment_open = #{commentOpen}, ping_open = #{pingOpen},
            post_password     = #{postPassword}, post_name = #{postName}, post_modified = #{postModified},
            post_modified_utc = #{postModifiedUtc}, post_parent = #{postParent}, post_type = #{postType},
            post_mime_type    = #{postMimeType}, comment_count = #{commentCount}
        WHERE ID = #{postId}
    </update>

    <select id="findByStatusAndDateAndCategoryIdAndTagAndAuthorId" resultMap="postMap">
        SELECT DISTINCT
        <include refid="all"/>
        FROM
        posts
        LEFT JOIN users ON post_author=users.ID
        LEFT JOIN taxonomy_relationships ON posts.ID=taxonomy_relationships.post_id
        LEFT JOIN taxonomy ON taxonomy_relationships.taxonomy_id=taxonomy.taxonomy_id
        <where>
            1=1
            <if test="authorId != 0 ">
                AND post_author=#{authorId}
            </if>
            <if test="status != null">
                AND post_status=#{status}
            </if>
            <if test="start !=null and end !=null">
                AND post_date &gt;= #{start} AND post_date &lt;= #{end}
            </if>
            <if test="categoryId != null">
                AND taxonomy_relationships.taxonomy_id=#{categoryId}
            </if>
            <if test="tagName != null">
                AND name=#{tagName} AND taxonomy='tag'
            </if>
        </where>
        ORDER BY posts.ID DESC
    </select>

    <select id="countByStatus" resultType="java.lang.Long" parameterType="com.youthlin.blog.model.enums.PostStatus">
        SELECT COUNT(1)
        FROM posts
        <where>
            1=1
            <if test="status != null">
                AND post_status = #{status}
            </if>
        </where>
    </select>

    <select id="findById" resultMap="postMap">
        SELECT
        <include refid="all"/>
        FROM posts
        WHERE ID=#{id}
    </select>

    <select id="queryByTaxonomySlugKindAndDate" resultMap="postMap">
        SELECT DISTINCT
        <include refid="all"/>
        FROM
        <choose>
            <when test="taxonomies !=null and taxonomies.size() > 0">
                taxonomy
                LEFT JOIN taxonomy_relationships ON taxonomy.taxonomy_id=taxonomy_relationships.taxonomy_id
                LEFT JOIN posts ON taxonomy_relationships.post_id=posts.ID
            </when>
            <otherwise>
                posts
            </otherwise>
        </choose>
        <where>
            posts.post_date &lt; now()
            <if test="status!=null">
                AND posts.post_status=#{status}
            </if>
            <if test="taxonomies !=null and taxonomies.size() > 0">
                <foreach collection="taxonomies" item="tax" open="AND (" close=")" separator="OR">
                    ( taxonomy.slug=#{tax.slug} AND taxonomy.taxonomy=#{tax.taxonomy})
                </foreach>
            </if>
            <if test="start!=null and end!=null">
                AND (posts.post_date &gt;= #{start} AND posts.post_date &lt;= #{end})
            </if>
            <if test="author != null">
                AND posts.post_author=#{author.userId}
            </if>
        </where>
        ORDER BY posts.post_date DESC
    </select>

    <select id="findIdGreaterOrLessThen" resultMap="postMap">
        SELECT
        <include refid="all"/>
        FROM posts
        <where>
            post_status=0
            AND
            <choose>
                <when test="grater">
                    ID &gt; #{id}
                </when>
                <otherwise>
                    ID &lt; #{id}
                </otherwise>
            </choose>
        </where>
        ORDER BY post_date
        <if test="!grater">DESC</if>
    </select>

    <select id="listPost" resultMap="postMap">
        SELECT
        <include refid="all"/>
        FROM posts
        WHERE post_status=0
        <foreach collection="list" item="id" open="AND ID IN(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <select id="listAllDateByStatus" resultType="java.util.Date">
        SELECT post_date
        FROM posts
        WHERE posts.post_date &lt; now()
        <if test="status != null">
            AND post_status=#{status}
        </if>
        ORDER BY post_date DESC
    </select>

    <select id="listRecentPublished" resultMap="postMap">
        SELECT
        <include refid="all"/>
        FROM posts WHERE post_status=0 ORDER BY post_date DESC LIMIT #{count}
    </select>

    <select id="listByPostIds" resultMap="postMap" parameterType="collection">
        SELECT
        <include refid="all"/>
        FROM posts
        WHERE 1!=1
        <if test="postIds !=null and postIds.size()>0">
            <foreach collection="postIds" item="id" open="OR ID IN(" close=")" separator=",">
                #{id}
            </foreach>
        </if>
    </select>

    <select id="search" resultMap="postMap">
        SELECT DISTINCT
        <include refid="all"/>
        FROM posts
        WHERE 1!=1
        <if test="keywords != null">
            OR post_content LIKE CONCAT('%',#{keywords},'%')
            OR post_title LIKE CONCAT('%',#{keywords},'%')
            OR post_excerpt LIKE CONCAT('%',#{keywords},'%')
        </if>
        ORDER BY post_date DESC
    </select>

</mapper>
